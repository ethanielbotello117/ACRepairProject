// this is a shorcut to center any block element

@mixin center-auto{
    margin: {
        left: auto;
        right: auto;
    }
}

// div{
//     @include center-auto()
// }

// this is a simple way to define a box
@mixin box($width, $height:$width){
    width: $width;
    height: $height;
}

// div{
//     @include box (200px)
// }
// div{
//     @include box(200px, 100px)
// }

@mixin cover-background{
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}

// div{
//     background-image: url(`this.jpg);
//     @include cover-background();
// }

// flexbox toolkit
@mixin flex-column{
    display: flex;
    flex-direction: column;
}

@mixin flex-center{
    display: flex;
    align-items: center;
    justify-content: center;
}

// you can use mixins inside of other mixins as well
@mixin flex-center-column{
    @include flex-center();
    flex-direction: column;
}

@mixin flex-space-bet{
    display: flex;
    align-items: center;
    justify-content: space-between;
}

@mixin flex-space-ar{
    display: flex;
    align-items: center;
    justify-content: space-around;
}

// this is when we use ::after and ::before
@mixin psuedo(
$width: 100%,
$height: 100%,
$display: block,
$pos: absolute,
$content: ""){
    content: $content;
    display: $display;
    position: $pos;
    @include box($width, $height)
}

// div{
//     position: relative;
//     width: 200px;
//     height: 200px;
//     &::after{
//         @include psuedo(200px, 100px);
//         background: linear-gradient();
//     }
// }

// positioning helpers
@mixin position($position, $args) {
    @each $pos in top right bottom left{
        $i: index($args, $pos);
        @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)){
            #{$pos}: nth($args, $i + 1)
        }
    }
    position: $position;
}

@mixin absolute($args: " "){
    @include position(absolute, $args)
}
@mixin fixed($args: " "){
    @include positfiion(fixed, $args)
}
@mixin relative($args: " "){
    @include positfiion(relative, $args)
}

// .menu li {
    //     @include absolute(top 100% left 0)
    // }
    // .sticky-bar {
        //     @include fixed(top 0 left 0)
        // }
        // .submenu{
//     position: relative()
// }

$phone-wide : 480px;
$phablet : 560px;
$tablet-small : 640px;
$tablet : 768px;
$large : 1024px;
$desktop : 1280px;
$desktop-wide : 1440px;

@mixin tablet {
    @media only screen and (min-width: $tablet){
        @content;
    }
}
@mixin phone {
    @media only screen and (min-width: $phone){
        @content;
    }
}
@mixin large {
    @media only screen and (min-width: $large){
        @content;
    }
}

// div{
//     font-size: 3rem;
//     @include tablet(){
//         font-size: 2rem;
//     }
// }

@mixin fade($type){
        @if $type == "hide"{
            visibility: hidden;
            opacity: 0;
            transition: $transition;
            // transition: visibility 1s opacity 1s;
    } @else if $type == "show"{
        visibility: visible;
        opacity: 1;
        transition: $transition;
    }
}

// mixin for input placeholder
@mixin input-placeholder {
    &.placeholder{
        @content;
    }
    &:-moz-placeholder{
        @content;
    }
    &::-moz-placeholder{
        @content;
    }
    &:-ms-input-placeholder{
        @content;
    }
    &::-webkit-input-placeholder{
        @content;
    }
}
// div{
//     @include input-placeholder(){
//         color: red
//     }
// }

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal){
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + '.eot');
        src: url($file-name + '.eot?#iefix') format("embedded-opentype"),
        url($filename + '.woff') format("woff"),
        url($filename + '.ttf') format("truetype"),
        url($filename + '.svg') format("svg");
        font-weight: $weight;
        font-style: $style;
    }
}

// @include font-face("MyFont", './base/typeography/myfont.ttf', $style: underline);
// div{
//     font-family: "MyFont";
// }

@mixin text-short {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// for creating css triangles
@mixin css-triangle(
    $color,
    $direction,
    $size: 6px,
    $position: absolute,
    $round: false
){
    @include psuedo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round($size / 2.5);
    }
    @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round($size / 2.5);
    }
    @else if $direction == right {
        border-left: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    }
    @else if $direction == left {
        border-left: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

menu.li{
    @include css-triangle(red, right)
}